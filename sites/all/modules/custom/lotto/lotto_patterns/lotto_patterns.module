<?php
module_load_include('inc', 'lotto_patterns', 'lotto_autopicks');
module_load_include('inc', 'lotto_patterns', 'lotto_autopicks_apd_numbers_quick');

/*
 * //positives
 * diagonal_step_up
 * diagnoal step_down
 * ladder
 * piller
 * 
 * //negative
 * blackcloud
 * 
 * horizontal_beam(unpredictable)
 * 
 * 
 * diagonal step up 5
 * diagnoal step down 5
 * pillar down 5
 * diagonal under step up 5
 * diagonal under step down 5
 * 
 */

function lotto_patterns_feed($lottery_name, $lottery_draw_num, $num_draws){
    $lotto_pattern_feed = array();
    $x = 0;
    while ($x < $num_draws){
	$lottery_results_id = $lottery_draw_num - $x;
	$lotto_pattern_feed[$lottery_results_id] = lotto_binary_results($lottery_name, $lottery_results_id);
	$x++;
    }
    return $lotto_pattern_feed;
}

//diag_step_up
function lotto_pattern_diag_step_up($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if (($y-$i) > 0){
	$pattern .= $lottery_pattern_feed[$x-$i][$y-$i];    
	}
    $i++;
    }
    
    return $pattern;
}

//diag_step_down
function lotto_pattern_diag_step_down($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if (($y+$i) <= count($lottery_pattern_feed[$x])){
	    $pattern .= $lottery_pattern_feed[$x-$i][$y+$i];  
	}
    $i++;
    }
    
    return $pattern;
}
//pillar_down
function lotto_pattern_pillar_down($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
    $pattern .= $lottery_pattern_feed[$x-$i][$y];    
    $i++;
    }
    
    return $pattern;
}

//disg_und_step_up
function lotto_pattern_diag_under_step_up($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if ( $i <= 1){
	    $pattern .= $lottery_pattern_feed[$x-$i][$y];
	} else {
	    if ((($y-$i)+1) > 0){
		$pattern .= $lottery_pattern_feed[$x-$i][(($y-$i)+1)];    
		}  
	}
	
    $i++;
    }
    
    return $pattern;
}

//disg_und_step_up
function lotto_pattern_diag_under_step_down($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if($i <= 1){
	    $pattern .= $lottery_pattern_feed[$x-$i][$y];
	} else {
	    if ((($y+$i)-1) <= count($lottery_pattern_feed[$x])){
		$pattern .= $lottery_pattern_feed[$x-$i][(($y+$i)-1)]; 
	    }
	}
    $i++;
    }
    
    return $pattern;
}

function lotto_patterns_create($lottery_name, $lottery_draw_num, $num_draws){
    $lottery_patterns = array();
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $pattern_feed = lotto_patterns_feed($lottery_name, $lottery_draw_num, $num_draws);
	    $i = 1; $x=80;
	    while ($i <= $x){
		$lottery_patterns[$i]['diag_step_up'] = lotto_pattern_diag_step_up($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['pillar_down'] = lotto_pattern_pillar_down($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['diag_step_down'] = lotto_pattern_diag_step_down($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['diag_und_step_up'] = lotto_pattern_diag_under_step_up($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['diag_und_step_down'] = lotto_pattern_diag_under_step_down($pattern_feed, $lottery_draw_num, $i, $num_draws);
			
		$i++;
	    }     
	break;
    }
    return $lottery_patterns;
}

function lotto_patterns_insert($lottery_name, $lottery_draw_num, $lottery_patterns){
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $pattern = array(
		'lpid'=>null,
		'lottery_name'=>$lottery_name,
		'lottery_draw_num'=>$lottery_draw_num
	    );
	    $x=1; $y=80;
	    while ($x <= $y){
		$pattern['num'] = $x;
		$pattern['diag_step_up'] = $lottery_patterns[$x]['diag_step_up'];
		$pattern['pillar_down'] = $lottery_patterns[$x]['pillar_down'];
		$pattern['diag_step_down'] = $lottery_patterns[$x]['diag_step_down'];
		$pattern['diag_und_step_up'] = $lottery_patterns[$x]['diag_und_step_up'];
		$pattern['diag_und_step_down'] = $lottery_patterns[$x]['diag_und_step_down'];
		
		$inserted = db_insert('lotto_patterns')->fields($pattern)->execute();
		$x++;
	    }
	    
	    
	    break;
    }
}

function lotto_patterns_import($lottery_name, $lottery_id_top, $lottery_id_bottom, $num_draws){
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $y=1;
	    $lottery_id = $lottery_id_top;
	    $pattern_feed = lotto_patterns_feed($lottery_name, $lottery_id, $num_draws);
	    while ($lottery_id >= $lottery_id_bottom){
		
		$pattern_feed = lotto_patterns_feed($lottery_name, $lottery_id, $num_draws);
	    $pattern = array(
		'lpid'=>null,
		'lottery_name'=>$lottery_name,
		'lottery_id'=>$lottery_id
	    );
	    
	    $i = 1; $x=80;
	    while ($i <= $x){
		$pattern['num'] = $i;
		$pattern['diag_step_up'] = lotto_pattern_diag_step_up($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['pillar_down'] = lotto_pattern_pillar_down($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['diag_step_down'] = lotto_pattern_diag_under_step_down($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['diag_und_step_up'] = lotto_pattern_diag_under_step_up($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['diag_und_step_down'] = lotto_pattern_diag_under_step_down($pattern_feed, $lottery_id, $i, $num_draws);
		
		$inserted = db_insert('lotto_patterns')->fields($pattern)->execute();
		$i++;
	    }     
		
		$y++;
		$lottery_id = $lottery_id_top - $y;
		
	    }
	    
	    break;
    }
}

function lotto_patterns_diag_win_ratio_config($lottery_name){
    $dwr_config=array();
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $x=1; $y=80;
	    while ($x <= $y){
		$dwr_config[$x] = array(
					'forward'=>array(
					    'wins'=>0,
					    'count'=>0,
					    'ratio'=>0
					),
					'backward'=>array(
					    'wins'=>0,
					    'count'=>0,
					    'ratio'=>0
					)
				    );	    
		$x++;
	    }
	    break;
    }   
    
    return $dwr_config;
}

function lotto_patterns_diag_win_ratio($lottery_name, $draw_number, $num_of_results = 80){    
    
    $diag_wins_ratio = lotto_patterns_diag_win_ratio_config($lottery_name);
    
    
    $draw_num = $draw_number; $x=0; $y = $num_of_results; $z = 80; $stat_type = 3;
    
    $all_stats= array();
    
    while($x <= $num_of_results){
	$current_draw_num = $draw_num - $x;
	$current_stats = lotto_stats_by_draw_number($lottery_name, $current_draw_num, $stat_type);
		
	    for($num = 1; $num <= $z; $num++){

		$current_num_forward = $num + $x;
		if ($current_num_forward <= $z){
		    if( $current_stats['s'.$current_num_forward] == 0){
			$diag_wins_ratio[$num]['forward']['wins']++;
		    }
		    
		   $diag_wins_ratio[$num]['forward']['count']++;
		}


		$current_num_backward = $num - $x;
		if ($current_num_backward > 0){
		    if ( $current_stats['s'.$current_num_backward] == 0){
			$diag_wins_ratio[$num]['backward']['wins']++;
		    }
		   $diag_wins_ratio[$num]['backward']['count']++;
		}

		
	    }
	
	$x++;	    
    }
    foreach ($diag_wins_ratio as $num => $data){
	
	$diag_wins_ratio[$num]['forward']['ratio'] = round(($data['forward']['wins'] / $data['forward']['count']), 3);
	$diag_wins_ratio[$num]['backward']['ratio'] = round(($data['backward']['wins'] / $data['backward']['count']), 3);
    }
    
    return $diag_wins_ratio;
}
    
   function lotto_patterns_diag_win_ratio_spiral($lottery_name, $draw_number, $num_of_results = 80){    
    
    $diag_wins_ratio = lotto_patterns_diag_win_ratio_config($lottery_name);
    
    
    $draw_num = $draw_number; $x=0; $y = $num_of_results; $z = 80; $stat_type = 3;
    
    $all_stats= array();
    
    while($x <= $num_of_results){
	$current_draw_num = $draw_num - $x;
	$current_stats = lotto_stats_by_draw_number($lottery_name, $current_draw_num, $stat_type);
		
	    for($num = 1; $num <= $z; $num++){

		$current_num_forward = $num + $x;
		if ($current_num_forward <= $z){
		    if( $current_stats['s'.$current_num_forward] == 0){
			$diag_wins_ratio[$num]['forward']['wins']++;
		    }
		    
		   $diag_wins_ratio[$num]['forward']['count']++;
		} else { //SPIRAL NUMBER STARTED
		    $current_num_forward_spiral = $current_num_forward % 80;
		    if ($current_num_forward_spiral == 0){
			$current_num_forward_spiral = 80;
		    }
		    
		    if( $current_stats['s'.$current_num_forward_spiral] == 0){
			$diag_wins_ratio[$num]['forward']['wins']++;
		    }
		    
		   $diag_wins_ratio[$num]['forward']['count']++;
		
		} //SPIRAL NUMBERING ENDS


		$current_num_backward = $num - $x;
		if ($current_num_backward > 0){
		    if ( $current_stats['s'.$current_num_backward] == 0){
			$diag_wins_ratio[$num]['backward']['wins']++;
		    }
		   $diag_wins_ratio[$num]['backward']['count']++;
		} else { //SPIRAL NUMBER STARTED
		    $current_num_backward_spiral = 80 + ($current_num_backward % 80);
		    if ($current_num_backward_spiral == 0){
			$current_num_backward_spiral = 80;
		    }
		    
		    if( $current_stats['s'.$current_num_backward_spiral] == 0){
			$diag_wins_ratio[$num]['backward']['wins']++;
		    }
		    
		   $diag_wins_ratio[$num]['backward']['count']++;
		}//SPIRAL NUMBERING ENDS

		
	    }
	
	$x++;	    
    }
    foreach ($diag_wins_ratio as $num => $data){
	
	$diag_wins_ratio[$num]['forward']['ratio'] = round(($data['forward']['wins'] / $data['forward']['count']), 3);
	$diag_wins_ratio[$num]['backward']['ratio'] = round(($data['backward']['wins'] / $data['backward']['count']), 3);
    }
    
    return $diag_wins_ratio;
}

function lotto_patterns_diag_win_ratio_sorted($diag_wins_ratio){
    
    $forward_ratios = array();
    $backward_ratios = array();
    foreach ($diag_wins_ratio as $num => $data){
	$forward_ratios[$num] = $data['forward']['ratio'];
	$backward_ratios[$num] = $data['backward']['ratio'];
    }
    
    arsort($forward_ratios);
    arsort($backward_ratios);
    $forward=array();
    $backward=array();
    foreach($forward_ratios as $num=>$ratio){
	array_push($forward, array($num => $diag_wins_ratio[$num]['forward'] ) );
    }
    
    foreach($backward_ratios as $num=>$ratio){
	array_push($backward, array($num => $diag_wins_ratio[$num]['backward'] ) );
    }
    $ratio_sorted = array();
    for($i=0;$i<80;$i++){
	$ratio_sorted[$i+1] = array(
	    'forward' =>$forward[$i],
	    'backward'=>$backward[$i]		
	    );	
    }
  
    return $ratio_sorted;
}

function lotto_patterns_diag_win_numbers_sorted($lottery_name, $draw_num, $num_of_draws){
    $diag_win_ratio = lotto_patterns_diag_win_ratio($lottery_name, $draw_num, $num_of_draws);
    $diag_wins_ratio_sorted = lotto_patterns_diag_win_ratio_sorted($diag_win_ratio);
    
    $diag_win_numbers = array('stepup_nbrs'=>array(), 'stepdown_nbrs'=>array());
    foreach($diag_wins_ratio_sorted as $rank=>$data){
	foreach($data['backward'] as $num_b=>$ratio_b){
	    $diag_win_numbers['stepup_nbrs'][$rank] = $num_b;
	}
	
	foreach($data['forward'] as $num_f=>$ratio_f){
	    $diag_win_numbers['stepdown_nbrs'][$rank] = $num_f;
	}	
    }
    return $diag_win_numbers;
}

function lotto_patterns_diag_win_efficiency_numbers($lottery_name, $draw_num, $num_of_draws, $top_of=10){
    $diag_win_numbers = lotto_patterns_diag_win_numbers_sorted($lottery_name, $draw_num, $num_of_draws);
    
    $diag_win_efficiency_numbers=array();
    for($i = 1; $i <= $top_of; $i++){
	$diag_win_efficiency_numbers['stepup'][$i] = $diag_win_numbers['stepup_nbrs'][$i];
	$diag_win_efficiency_numbers['stepdown'][$i] = $diag_win_numbers['stepdown_nbrs'][$i];
	
	if (($i % 2) == 0){
	    $diag_win_efficiency_numbers['z2updown'][$i] = $diag_win_numbers['stepup_nbrs'][$i];
	    $diag_win_efficiency_numbers['z1updown'][$i] = $diag_win_numbers['stepdown_nbrs'][$i];
	} else {
	    $diag_win_efficiency_numbers['z1updown'][$i] = $diag_win_numbers['stepup_nbrs'][$i];
	    $diag_win_efficiency_numbers['z2updown'][$i] = $diag_win_numbers['stepdown_nbrs'][$i];
	}
    }
    diag_win_efficiency_numbers_exclude_dups($diag_win_efficiency_numbers);
    return $diag_win_efficiency_numbers;
}

function lotto_patterns_diag_win_efficiency_numbers_spiral($lottery_name, $draw_num, $num_of_draws, $top_of=10){
    $diag_win_numbers = lotto_patterns_diag_win_numbers_sorted($lottery_name, $draw_num, $num_of_draws);
    $pillar_win_numbers =  lotto_stats_each_number_frequency_ratio_sorted($lottery_name, $draw_num, $num_of_draws);
    
    $diag_win_efficiency_numbers=array();
    for($i = 1; $i <= $top_of; $i++){
	foreach($pillar_win_numbers[$i] as $num=>$data){
	    $diag_win_efficiency_numbers['pillar'][$i] = $num;
	}
	$diag_win_efficiency_numbers['stepup'][$i] = $diag_win_numbers['stepup_nbrs'][$i];
	$diag_win_efficiency_numbers['stepdown'][$i] = $diag_win_numbers['stepdown_nbrs'][$i];
	
	if (($i % 2) == 0){
	    $diag_win_efficiency_numbers['z2updown'][$i] = $diag_win_numbers['stepup_nbrs'][$i];
	    $diag_win_efficiency_numbers['z1updown'][$i] = $diag_win_numbers['stepdown_nbrs'][$i];
	} else {
	    $diag_win_efficiency_numbers['z1updown'][$i] = $diag_win_numbers['stepup_nbrs'][$i];
	    $diag_win_efficiency_numbers['z2updown'][$i] = $diag_win_numbers['stepdown_nbrs'][$i];
	}
    }
    diag_win_efficiency_numbers_exclude_dups($diag_win_efficiency_numbers);
    return $diag_win_efficiency_numbers;
}


function diag_win_efficiency_numbers_exclude_dups(&$diag_win_efficiency_numbers){
    $dups = array();
    $dup_entries = array();
    foreach($diag_win_efficiency_numbers['stepup'] as $num){
	if ( in_array($num, $diag_win_efficiency_numbers['stepdown']) ){
	    array_push($dups, $num);
	}
    }
  if (count($dups) > 0)  {
    foreach($dups as $num_d){
	if( in_array($num_d, $diag_win_efficiency_numbers['z2updown'])){
	    $pos_d = array_search($num_d, $diag_win_efficiency_numbers['z2updown']);
	    unset($diag_win_efficiency_numbers['z2updown'][$pos_d]);
	} else {
	    $z1updown_unique = array_unique($diag_win_efficiency_numbers['z1updown']);
	    $dup_entries = array_diff_key($diag_win_efficiency_numbers['z1updown'], $z1updown_unique);
	}
    }
  }
  if (count($dup_entries) > 0)  {  
    foreach($dup_entries as $key=>$num_dup){
	unset($diag_win_efficiency_numbers['z1updown'][$key]);
	if(array_key_exists($key, $diag_win_efficiency_numbers['z2updown'])){
	    $diag_win_efficiency_numbers['z1updown'][$key] = $diag_win_efficiency_numbers['z2updown'][$key];
	    unset($diag_win_efficiency_numbers['z2updown'][$key]);	    
	} else{
	    $key_prev = $key - 1;
	    $diag_win_efficiency_numbers['z1updown'][$key] = $diag_win_efficiency_numbers['z2updown'][$key_prev];
	    unset($diag_win_efficiency_numbers['z2updown'][$key_prev]);
	}   
	}
    }
}
function lotto_patterns_diag_win_pattern_grid_create($lottery_name, $draw_number, $num_of_results = 80, $draw_num_to_validate = null){
    
    if ( $draw_num_to_validate == null){
	$lotto_results = array();
    } else {
	$lotto_results = array();
	$draw_results = lotto_results_by_draw_number($lottery_name, $draw_num_to_validate);
	for($i=1; $i <= 20; $i++){
	    array_push($lotto_results, $draw_results['n'.$i]);
	}
    }
    
    
    $header = "<table class=\"diag_wins_pattern_grid\"><tbody>";
    
    $body = "<tr>";
    $body .= "<th>Rank</th>";
    $body .= "<th>Number(Step Up)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "<th></th><th></th>";
    $body .= "<th>Number(Step Down)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "</tr>";
    
    $diag_wins_ratio = lotto_patterns_diag_win_ratio($lottery_name, $draw_number, $num_of_results);
    $ratios_sorted = lotto_patterns_diag_win_ratio_sorted($diag_wins_ratio);
    
    foreach($ratios_sorted as $rank=>$data){
	$body .= "<tr>";
	$body .= "<th>".$rank."</th>";
	
	foreach($data['backward'] as $num_b=>$values_b){
	    $body .= ( in_array($num_b, $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
	    $body .= $num_b."</td>";
	    $body .= "<td>".$values_b['ratio']."</td>";
	    $body .= "<td>".$values_b['wins']." / ".$values_b['count']."</td>";
	}
	
	$body .= "<td></td><td></td>";
	
	foreach($data['forward'] as $num_f=>$values_f){
	    $body .= ( in_array($num_f, $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
	    $body .= $num_f."</td>";
	    $body .= "<td>".$values_f['ratio']."</td>";
	    $body .= "<td>".$values_f['wins']." / ".$values_f['count']."</td>";
	}
	
	
	
	$body .= "</tr>";
    }
    
    
    
    $footer = "</tbody></table>";
    
    $diag_wins_pattern_grid = $header . $body . $footer;
    return $diag_wins_pattern_grid;    
}

function lotto_patterns_diag_win_pattern_grid_create_spiral($lottery_name, $draw_number, $num_of_results = 80, $draw_num_to_validate = null){
    
    if ( $draw_num_to_validate == null){
	$lotto_results = array();
    } else {
	$lotto_results = array();
	$draw_results = lotto_results_by_draw_number($lottery_name, $draw_num_to_validate);
	for($i=1; $i <= 20; $i++){
	    array_push($lotto_results, $draw_results['n'.$i]);
	}
    }
    
    
    $header = "<table class=\"diag_wins_pattern_grid\"><tbody>";
    
    $body = "<tr>";
    $body .= "<th>Rank</th>";
    $body .= "<th>Number(Step Up)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "<th></th><th></th>";
    $body .= "<th>Number(Step Down)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "</tr>";
    
    $diag_wins_ratio = lotto_patterns_diag_win_ratio_spiral($lottery_name, $draw_number, $num_of_results);
    $ratios_sorted = lotto_patterns_diag_win_ratio_sorted($diag_wins_ratio);
    
    foreach($ratios_sorted as $rank=>$data){
	$body .= "<tr>";
	$body .= "<th>".$rank."</th>";
	
	foreach($data['backward'] as $num_b=>$values_b){
	    $body .= ( in_array($num_b, $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
	    $body .= $num_b."</td>";
	    $body .= "<td>".$values_b['ratio']."</td>";
	    $body .= "<td>".$values_b['wins']." / ".$values_b['count']."</td>";
	}
	
	$body .= "<td></td><td></td>";
	
	foreach($data['forward'] as $num_f=>$values_f){
	    $body .= ( in_array($num_f, $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
	    $body .= $num_f."</td>";
	    $body .= "<td>".$values_f['ratio']."</td>";
	    $body .= "<td>".$values_f['wins']." / ".$values_f['count']."</td>";
	}
	
	
	
	$body .= "</tr>";
    }
    
    
    
    $footer = "</tbody></table>";
    
    $diag_wins_pattern_grid = $header . $body . $footer;
    return $diag_wins_pattern_grid;    
}

function lotto_patterns_autopicks_grid_create($lottery_name, $lottery_draw_num, $draw_num_to_validate = null){
    $header ="<table class=\"autopicks_grid\" ><tbody>";
    $body="";
    
    $autopicks = lotto_bets_autopick($lottery_name, $lottery_draw_num);
    
    if ( $draw_num_to_validate == null){
	$lotto_results = array();
    } else {
	$lotto_results = array();
	$draw_results = lotto_results_by_draw_number($lottery_name, $draw_num_to_validate);
	for($i=1; $i <= 20; $i++){
	    array_push($lotto_results, $draw_results['n'.$i]);
	}
    }
    
    for($i=0; $i <= 20; $i++){	
	if($i == 0){
		$body .= "<tr><th></th>";
	 } else $body .= "<th>".$i."</th>";	
    }
    $body .="</tr>";
    
    if (count($autopicks['diagonal']) > 0){
	
	for($i=0; $i <= 20; $i++){
	    if($i == 0){
		$body .= "<tr><th>Diagonal</th>";
		$body .= "<td>".$autopicks['diagonal'][$i]."</td>";
	    } elseif ($i < count($autopicks['diagonal']) ){
		$body .= ( in_array($autopicks['diagonal'][$i], $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
		$body .= $autopicks['diagonal'][$i]."</td>";
	    } else $body .= "<td class=\"black\" ></td>";
	}
	$body .="</tr>";
    }
    
    if (count($autopicks['pillar']) > 0){
	
	for($i=0; $i <= 20; $i++){	
	    if($i == 0){
		$body .= "<tr><th>Pillar</th>";
		$body .= "<td>".$autopicks['pillar'][$i]."</td>";
	    } elseif ($i < count($autopicks['pillar']) ){
		$body .= ( in_array($autopicks['pillar'][$i], $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
		$body .= $autopicks['pillar'][$i]."</td>";	
	    } else $body .= "<td class=\"black\" ></td>";	
	}
	$body .="</tr>";
    }
    
    if (count($autopicks['ladder']) > 0){
	
	for($i=0; $i <= 20; $i++){	
	    if($i == 0){
		$body .= "<tr><th>Ladder</th>";
		$body .= "<td>".$autopicks['ladder'][$i]."</td>";	
	    } elseif ($i < count($autopicks['ladder']) ){
		$body .= ( in_array($autopicks['ladder'][$i], $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
		$body .= $autopicks['ladder'][$i]."</td>";	
	    } else $body .= "<td class=\"black\" ></td>";
	}
	$body .="</tr>";
    }
    
    if (count($autopicks['sequence']) > 0){
	
	for($i=0; $i <= 20; $i++){	
	    if($i == 0){
		$body .= "<tr><th>Sequence</th>";
		$body .= "<td>".$autopicks['sequence'][$i]."</td>";		
	    }  elseif ($i < count($autopicks['sequence']) ){
		$body .= ( in_array($autopicks['sequence'][$i], $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
		$body .= $autopicks['sequence'][$i]."</td>";	
	    } else $body .= "<td class=\"black\" ></td>";
	}
	$body .="</tr>";
    }
    
    if (count($autopicks['previous_trend']) > 0){
	
	for($i=0; $i <= 20; $i++){	
	    if($i == 0){
		$body .= "<tr><th>Previous Trend</th>";
		 $body .= "<td>".$autopicks['previous_trend'][$i]."</td>";			
	    } elseif ($i < count($autopicks['previous_trend']) ){
		$body .= ( in_array($autopicks['previous_trend'][$i], $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
		$body .= $autopicks['previous_trend'][$i]."</td>";
	    } else $body .= "<td class=\"black\" ></td>";	
	}
	$body .="</tr>";
    }
    
    $footer ="</tbody></table>";
    
    $autopicks_grid = $header.$body.$footer;
    return $autopicks_grid;
}

function lotto_patterns_grid_by_drawnum_create($lottery_name, $draw_num, $number_of_draws=100, $draw_num_to_validate=null){
   $patterns_grid = "";
    
   switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    if ( $draw_num_to_validate == null){
		$lotto_results = array();
	    } else {
		$lotto_results = array();
		$draw_results = lotto_results_by_draw_number($lottery_name, $draw_num_to_validate);
		for($i=1; $i <= 20; $i++){
		    array_push($lotto_results, $draw_results['n'.$i]);
		}
	    }

	    $stat_type = 3;
	    $lotto_stats = lotto_stats_by_draw_number($lottery_name, $draw_num, $stat_type);
	    
	    $patterns_grid = lotto_pattern_grid_create($lottery_name, $lotto_stats['lksid'], $number_of_draws, $lotto_results);
	    
	    break;
    }
    
    return $patterns_grid;
}

function lotto_patterns_pillar_win_pattern_grid_create($lottery_name, $draw_number, $num_of_results = 100, $draw_num_to_validate = null){
    
    if ( $draw_num_to_validate == null){
	$lotto_results = array();
    } else {
	$lotto_results = array();
	$draw_results = lotto_results_by_draw_number($lottery_name, $draw_num_to_validate);
	for($i=1; $i <= 20; $i++){
	    array_push($lotto_results, $draw_results['n'.$i]);
	}
    }
    
    
    $header = "<table class=\"pillar_wins_pattern_grid\"><tbody>";
    
    $body = "<tr>";
    $body .= "<th>Rank</th>";
    $body .= "<th>Number(Pillar Win)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "</tr>";
    
    $ratios_sorted = lotto_stats_each_number_frequency_ratio_sorted($lottery_name, $draw_number, $num_of_results);
    
    foreach($ratios_sorted as $rank=>$data){
	$body .= "<tr>";
	$body .= "<th>".$rank."</th>";
	
	foreach($data as $num=>$value){
	    $body .= ( in_array($num, $lotto_results) ) ? "<td class=\"green\" >" : "<td>";
	    $body .= $num."</td>";
	    $body .= "<td>".$value['ratio']."</td>";
	    $body .= "<td>".$value['wins']." / ".$value['count']."</td>";
	}
		
	$body .= "</tr>";
    }
    
    
    
    $footer = "</tbody></table>";
    
    $pillar_wins_pattern_grid = $header . $body . $footer;
    return $pillar_wins_pattern_grid;    
}


function lotto_patterns_results_grid_create($lottery_name, $draw_num_val){
    $header="<table class=\"results_grid\" ><tbody>";
    $body="";
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $results = lotto_results_by_draw_number($lottery_name, $draw_num_val);
	    $lotto_results = array();
	    for($i=1; $i <= 20; $i++){
		array_push($lotto_results, $results['n'.$i]);
	    }
	    $x=1; $y=10; $z=80;
	    for($x=1; $x <= $z; $x++){
		$body .= (($x % $y) == 1)? "<tr><td" : "<td";
		$body .= (in_array($x, $lotto_results)) ? " class=\"green\" >" : ">";
		$body .= $x;
		$body .= (($x % $y) == 0)? "</td></tr>" : "</td>";
	    }
	    
	    break;
    }
    
    $footer = "</tbody></table>";
    $results_grid =  $header . $body . $footer;
    return $results_grid;
}