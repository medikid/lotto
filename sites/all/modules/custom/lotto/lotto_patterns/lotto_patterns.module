<?php
module_load_include('inc', 'lotto_patterns', 'lotto_autopicks');

/*
 * //positives
 * diagonal_step_up
 * diagnoal step_down
 * ladder
 * piller
 * 
 * //negative
 * blackcloud
 * 
 * horizontal_beam(unpredictable)
 * 
 * 
 * diagonal step up 5
 * diagnoal step down 5
 * pillar down 5
 * diagonal under step up 5
 * diagonal under step down 5
 * 
 */

function lotto_patterns_feed($lottery_name, $lottery_draw_num, $num_draws){
    $lotto_pattern_feed = array();
    $x = 0;
    while ($x < $num_draws){
	$lottery_results_id = $lottery_draw_num - $x;
	$lotto_pattern_feed[$lottery_results_id] = lotto_binary_results($lottery_name, $lottery_results_id);
	$x++;
    }
    return $lotto_pattern_feed;
}

//diag_step_up
function lotto_pattern_diag_step_up($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if (($y-$i) > 0){
	$pattern .= $lottery_pattern_feed[$x-$i][$y-$i];    
	}
    $i++;
    }
    
    return $pattern;
}

//diag_step_down
function lotto_pattern_diag_step_down($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if (($y+$i) <= count($lottery_pattern_feed[$x])){
	    $pattern .= $lottery_pattern_feed[$x-$i][$y+$i];  
	}
    $i++;
    }
    
    return $pattern;
}
//pillar_down
function lotto_pattern_pillar_down($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
    $pattern .= $lottery_pattern_feed[$x-$i][$y];    
    $i++;
    }
    
    return $pattern;
}

//disg_und_step_up
function lotto_pattern_diag_under_step_up($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if ( $i <= 1){
	    $pattern .= $lottery_pattern_feed[$x-$i][$y];
	} else {
	    if ((($y-$i)+1) > 0){
		$pattern .= $lottery_pattern_feed[$x-$i][(($y-$i)+1)];    
		}  
	}
	
    $i++;
    }
    
    return $pattern;
}

//disg_und_step_up
function lotto_pattern_diag_under_step_down($lottery_pattern_feed, $lottery_id, $number, $num_draws){
    $pattern="";
    $x=$lottery_id;
    $y=$number;
    $i=0;
    while($i < $num_draws){
	if($i <= 1){
	    $pattern .= $lottery_pattern_feed[$x-$i][$y];
	} else {
	    if ((($y+$i)-1) <= count($lottery_pattern_feed[$x])){
		$pattern .= $lottery_pattern_feed[$x-$i][(($y+$i)-1)]; 
	    }
	}
    $i++;
    }
    
    return $pattern;
}

function lotto_patterns_create($lottery_name, $lottery_draw_num, $num_draws){
    $lottery_patterns = array();
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $pattern_feed = lotto_patterns_feed($lottery_name, $lottery_draw_num, $num_draws);
	    $i = 1; $x=80;
	    while ($i <= $x){
		$lottery_patterns[$i]['diag_step_up'] = lotto_pattern_diag_step_up($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['pillar_down'] = lotto_pattern_pillar_down($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['diag_step_down'] = lotto_pattern_diag_step_down($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['diag_und_step_up'] = lotto_pattern_diag_under_step_up($pattern_feed, $lottery_draw_num, $i, $num_draws);
		$lottery_patterns[$i]['diag_und_step_down'] = lotto_pattern_diag_under_step_down($pattern_feed, $lottery_draw_num, $i, $num_draws);
			
		$i++;
	    }     
	break;
    }
    return $lottery_patterns;
}

function lotto_patterns_insert($lottery_name, $lottery_draw_num, $lottery_patterns){
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $pattern = array(
		'lpid'=>null,
		'lottery_name'=>$lottery_name,
		'lottery_draw_num'=>$lottery_draw_num
	    );
	    $x=1; $y=80;
	    while ($x <= $y){
		$pattern['num'] = $x;
		$pattern['diag_step_up'] = $lottery_patterns[$x]['diag_step_up'];
		$pattern['pillar_down'] = $lottery_patterns[$x]['pillar_down'];
		$pattern['diag_step_down'] = $lottery_patterns[$x]['diag_step_down'];
		$pattern['diag_und_step_up'] = $lottery_patterns[$x]['diag_und_step_up'];
		$pattern['diag_und_step_down'] = $lottery_patterns[$x]['diag_und_step_down'];
		
		$inserted = db_insert('lotto_patterns')->fields($pattern)->execute();
		$x++;
	    }
	    
	    
	    break;
    }
}

function lotto_patterns_import($lottery_name, $lottery_id_top, $lottery_id_bottom, $num_draws){
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $y=1;
	    $lottery_id = $lottery_id_top;
	    $pattern_feed = lotto_patterns_feed($lottery_name, $lottery_id, $num_draws);
	    while ($lottery_id >= $lottery_id_bottom){
		
		$pattern_feed = lotto_patterns_feed($lottery_name, $lottery_id, $num_draws);
	    $pattern = array(
		'lpid'=>null,
		'lottery_name'=>$lottery_name,
		'lottery_id'=>$lottery_id
	    );
	    
	    $i = 1; $x=80;
	    while ($i <= $x){
		$pattern['num'] = $i;
		$pattern['diag_step_up'] = lotto_pattern_diag_step_up($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['pillar_down'] = lotto_pattern_pillar_down($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['diag_step_down'] = lotto_pattern_diag_under_step_down($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['diag_und_step_up'] = lotto_pattern_diag_under_step_up($pattern_feed, $lottery_id, $i, $num_draws);
		$pattern['diag_und_step_down'] = lotto_pattern_diag_under_step_down($pattern_feed, $lottery_id, $i, $num_draws);
		
		$inserted = db_insert('lotto_patterns')->fields($pattern)->execute();
		$i++;
	    }     
		
		$y++;
		$lottery_id = $lottery_id_top - $y;
		
	    }
	    
	    break;
    }
}

function lotto_patterns_diag_win_ratio_config($lottery_name){
    $dwr_config=array();
    switch($lottery_name){
	case 'lotto_max':
	    break;
	case 'lotto_keno':
	    $x=1; $y=80;
	    while ($x <= $y){
		$dwr_config[$x] = array(
					'forward'=>array(
					    'wins'=>0,
					    'count'=>0,
					    'ratio'=>0
					),
					'backward'=>array(
					    'wins'=>0,
					    'count'=>0,
					    'ratio'=>0
					)
				    );	    
		$x++;
	    }
	    break;
    }   
    
    return $dwr_config;
}

function lotto_patterns_diag_win_ratio($lottery_name, $draw_number, $num_of_results = 80){    
    
    $diag_wins_ratio = lotto_patterns_diag_win_ratio_config($lottery_name);
    
    
    $draw_num = $draw_number; $x=0; $y = $num_of_results; $z = 80; $stat_type = 3;
    
    $all_stats= array();
    
    while($x <= $num_of_results){
	$current_draw_num = $draw_num - $x;
	$current_stats = lotto_stats_by_draw_number($lottery_name, $current_draw_num, $stat_type);
		
	    for($num = 1; $num <= $z; $num++){

		$current_num_forward = $num + $x;
		if ($current_num_forward <= $z){
		    if( $current_stats['s'.$current_num_forward] == 0){
			$diag_wins_ratio[$num]['forward']['wins']++;
		    }
		    
		   $diag_wins_ratio[$num]['forward']['count']++;
		}


		$current_num_backward = $num - $x;
		if ($current_num_backward > 0){
		    if ( $current_stats['s'.$current_num_backward] == 0){
			$diag_wins_ratio[$num]['backward']['wins']++;
		    }
		   $diag_wins_ratio[$num]['backward']['count']++;
		}

		
	    }
	
	$x++;	    
    }
    
    
    foreach ($diag_wins_ratio as $num => $data){
	
	$diag_wins_ratio[$num]['forward']['ratio'] = round(($data['forward']['wins'] / $data['forward']['count']), 3);
	$diag_wins_ratio[$num]['backward']['ratio'] = round(($data['backward']['wins'] / $data['backward']['count']), 3);
    }
    
    return $diag_wins_ratio;
}

function lotto_patterns_diag_win_ratio_sorted($diag_wins_ratio){
    
    $forward_ratios = array();
    $backward_ratios = array();
    foreach ($diag_wins_ratio as $num => $data){
	$forward_ratios[$num] = $data['forward']['ratio'];
	$backward_ratios[$num] = $data['backward']['ratio'];
    }
    
    arsort($forward_ratios);
    arsort($backward_ratios);
    $forward=array();
    $backward=array();
    foreach($forward_ratios as $num=>$ratio){
	array_push($forward, array($num => $diag_wins_ratio[$num]['forward'] ) );
    }
    
    foreach($backward_ratios as $num=>$ratio){
	array_push($backward, array($num => $diag_wins_ratio[$num]['backward'] ) );
    }
    $ratio_sorted = array();
    for($i=0;$i<80;$i++){
	$ratio_sorted[$i+1] = array(
	    'forward' =>$forward[$i],
	    'backward'=>$backward[$i]		
	    );	
    }
  
    return $ratio_sorted;
}

function lotto_patterns_diag_win_pattern_grid_create($lottery_name, $draw_number, $num_of_results = 80){
    $header = "<table class=\"diag_wins_pattern_grid\"><tbody>";
    
    $body = "<tr>";
    $body .= "<th>Rank</th>";
    $body .= "<th>Number(Step Up)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "<th></th><th></th>";
    $body .= "<th>Number(Step Down)</th><th>Ratio</th><th>Wins / Count</th>";
    $body .= "</tr>";
    
    $diag_wins_ratio = lotto_patterns_diag_win_ratio($lottery_name, $draw_number, $num_of_results);
    $ratios_sorted = lotto_patterns_diag_win_ratio_sorted($diag_wins_ratio);
    
    foreach($ratios_sorted as $rank=>$data){
	$body .= "<tr>";
	$body .= "<th>".$rank."</th>";
	
	foreach($data['backward'] as $num_b=>$values_b){
	     $body .= "<td>".$num_b."</td>";
	    $body .= "<td>".$values_b['ratio']."</td>";
	    $body .= "<td>".$values_b['wins']." / ".$values_b['count']."</td>";
	}
	
	$body .= "<td></td><td></td>";
	
	foreach($data['forward'] as $num_f=>$values_f){
	    $body .= "<td>".$num_f."</td>";
	    $body .= "<td>".$values_f['ratio']."</td>";
	    $body .= "<td>".$values_f['wins']." / ".$values_f['count']."</td>";
	}
	
	
	
	$body .= "</tr>";
    }
    
    
    
    $footer = "</tbody></table>";
    
    $diag_wins_pattern_grid = $header . $body . $footer;
    return $diag_wins_pattern_grid;    
}